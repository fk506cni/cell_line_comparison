colslider_B <- conv_mat$category
colslider_B
colslider_B <- colslider_B[!one2multi_detect(colslider_B, out_words)]
colslider_B <- colslider_B[colslider_B!= "A"]
colslider_B <- colslider_B[colslider_B!= "Hepatocytes"]
tmp <- data.frame(colslider_B, colnames(nnn))
tmp
rowslider_B <- deg_B$gene_cluster
B_res_ward <- ggheat(df = t(nnn), colslider=rowslider_B ,rowslider=colslider_B, ColV = T,colname_label = F,rowname_label = F,font.size = 14,clst_method = "ward.D2",lmat=lmat, lwid=lwid, lhei = lhei,main = "")
grid.draw(B_res_ward$plot_data)
ggsave(plot=B_res_ward$plot_data,filename = "B_limited.tiff",dpi = 300,width = 18,height = 18,units = "cm")
B_res_avg <- ggheat(df = t(nnn), colslider=rowslider_B ,rowslider=colslider_B, ColV = T,colname_label = F,rowname_label = F,font.size = 14,clst_method = "average",lmat=lmat, lwid=lwid, lhei = lhei,main = "")
# Chunk 26
data_new_categ <- list()
categ3 <- list(Blood_cell=c("T_cell","T cell","T cells","CD4 cells","Treg","t_cell",
"Effector memory","Central memory","Naive, donor","B-cells",
"B cells","B cell","Monocyte","monocytes","monopcytes",
"Peripheral blood from healthy human donor",
"macrophages","Macrophages","Erythroblast",
"Bone marrow & progenitors","Myelocytes","MEP cells","GMP cells",
"CMP cells","HSC","Human composite bone marrow","peripheral blood, prior",
"Neutrophils","neutrophils","PMN","centrocyte","centroblast","platelet",
"NK cells","Natural killer cells","Natural Killer cells ",
"Dendritic cells","dendritic cells","MDDC","DCs","Dcs"),
Stromal_cell=c("-defrived mesenchymal stem cells","BM MSC","BM-MSC",
"cell type: mesenchymal stem cells","derived mesenchymal stem cells",
"smooth muscle cells","Smooth Muscle Cells","SMCs","smooth muscle cell",
"Foreskin Cells","normal fibroblast","cell type: fibroblast",
"Human Fibroblast cells","PDB fibroblasts","fibroblasts_",
"Fibroblasts uninfected","Fibroblasts infected",
"osteoblast","chondrocyte","DPSCs","adipocyte","adipose stem cell"),
Neuro_endo=c("Nerve","astrocytes","adrenal medulla"),
Hepatocytes=c("hepatocyte"),
Endothel=c("lymphatic endothelial cells","HUVEC","Vein ECs",
"blood vessel endothelial cell","HMVEC","cell type: Endothelial cells"),
Other=c("bronchial epithelial cells","bladder","keratinocytes"),
ES_iPS_germ=c("ESC","iPS","hIPSC","ES cell","Human Embryonic Stem Cells","embryonic stem cells","Sperm","Oocytes","oocytes")
)
categ3_2 <- list(Blood_cell=c("T_cell","T cell","T cells","CD4 cells","Treg","t_cell",
"Effector memory","Central memory","Naive, donor","B-cells",
"B cells","B cell","Monocyte","monocytes","monopcytes",
"Peripheral blood from healthy human donor",
"macrophages","Macrophages","Erythroblast",
"Bone marrow & progenitors","Myelocytes","MEP cells","GMP cells",
"CMP cells","HSC","Human composite bone marrow","peripheral blood, prior",
"Neutrophils","neutrophils","PMN","centrocyte","centroblast","platelet",
"NK cells","Natural killer cells","Natural Killer cells ",
"Dendritic cells","dendritic cells","MDDC","DCs","Dcs"),
Stromal_cell=c("-defrived mesenchymal stem cells","BM MSC","BM-MSC",
"cell type: mesenchymal stem cells","derived mesenchymal stem cells",
"smooth muscle cells","Smooth Muscle Cells","SMCs","smooth muscle cell",
"Foreskin Cells","normal fibroblast","cell type: fibroblast",
"Human Fibroblast cells","PDB fibroblasts","fibroblasts_",
"Fibroblasts uninfected","Fibroblasts infected",
"osteoblast","chondrocyte","DPSCs","adipocyte","adipose stem cell","Nerve"),
Neuro=c("astrocytes","adrenal medulla"),
Hepatocytes=c("hepatocyte"),
Endothel=c("lymphatic endothelial cells","HUVEC","Vein ECs",
"blood vessel endothelial cell","HMVEC","cell type: Endothelial cells"),
Other=c("bronchial epithelial cells","bladder","keratinocytes"),
ES_iPS_germ=c("ESC","iPS","hIPSC","ES cell","Human Embryonic Stem Cells","embryonic stem cells","Sperm","Oocytes","oocytes")
)
categ3_3 <- list(Blood_cell=c("T_cell","T cell","T cells","CD4 cells","Treg","t_cell",
"Effector memory","Central memory","Naive, donor","B-cells",
"B cells","B cell","Monocyte","monocytes","monopcytes",
"Peripheral blood from healthy human donor",
"macrophages","Macrophages","Erythroblast",
"Bone marrow & progenitors","Myelocytes","MEP cells","GMP cells",
"CMP cells","HSC","Human composite bone marrow","peripheral blood, prior",
"Neutrophils","neutrophils","PMN","centrocyte","centroblast","platelet",
"NK cells","Natural killer cells","Natural Killer cells ",
"Dendritic cells","dendritic cells","MDDC","DCs","Dcs"),
Stromal_cell=c("-defrived mesenchymal stem cells","BM MSC","BM-MSC",
"cell type: mesenchymal stem cells","derived mesenchymal stem cells",
"smooth muscle cells","Smooth Muscle Cells","SMCs","smooth muscle cell",
"Foreskin Cells","normal fibroblast","cell type: fibroblast",
"Human Fibroblast cells","PDB fibroblasts","fibroblasts_",
"Fibroblasts uninfected","Fibroblasts infected",
"osteoblast","chondrocyte","DPSCs","adipocyte","adipose stem cell",
"Nerve","astrocytes"),
Endocrine = c("adrenal medulla"),
Hepatocytes=c("hepatocyte"),
Endothel=c("lymphatic endothelial cells","HUVEC","Vein ECs",
"blood vessel endothelial cell","HMVEC","cell type: Endothelial cells"),
Epithelial=c("bronchial epithelial cells","bladder","keratinocytes"),
ES_iPS_germ=c("ESC","iPS","hIPSC","ES cell","Human Embryonic Stem Cells","embryonic stem cells","Sperm","Oocytes","oocytes")
)
# data_new_categ[["categ3"]] <- categ3
data_new_categ[["categ3"]] <- categ3_3
#append(data_new_categ, categ3=list(categ3))
sample_info <- data.frame(filename=cels,data_colname=data_colname,id=rowname_cands,stringsAsFactors = F)
sample_info <- merge(sample_info, result_df,by.x = "id", by.y = "geo_accession",sort = F,all.x = T)
sample_info$title <- ifelse(test = is.na(sample_info$title),yes = "",no = sample_info$title)
sample_info$source_name_ch1 <- ifelse(test = is.na(sample_info$source_name_ch1),
yes = "",no = sample_info$source_name_ch1)
sample_info$characteristics_ch1 <- ifelse(test = is.na(sample_info$characteristics_ch1),
yes = "",no = sample_info$characteristics_ch1)
sample_info$colname_tag <- base::paste(sample_info$id, sample_info$title)
sample_info$category <- categolizer(annotation_df = data.frame(sample_info$characteristics_ch1,
sample_info$source_name_ch1,
sample_info$title,stringsAsFactors = F),
dictionaly_list = data_new_categ$categ3)
sample_info$sample_tag <- paste(sample_info$category, sample_info$id, sep = "_")
sample_info$category <- ifelse(sample_info$category=="",str_extract(sample_info$colname_tag,"^[ABC]"),sample_info$category)
openxlsx::write.xlsx(x = sample_info,
file = "sample_info.xlsx")
data_new_categ[["sample_info"]] <- sample_info
m_re <- log2(mas5_4each)
m_re <- m_re[rownames(m_re) %in% deg$Row.names,]
colnames_temp <- colnames(m_re)
colnames_temp <- str_replace_all(colnames_temp,pattern = "\\.cel\\.gz","")
colnames_temp <- str_replace_all(colnames_temp,pattern = "\\.cel|\\.CEL","")
colnametemp <- for(i in c(1:length(colnames_temp))){
if(str_detect(colnames_temp[i],"^[ABC]")){
colnames_temp[i] <- colnames_temp[i]
}
else if(str_detect(colnames_temp[i], "^GSM")){
colnames_temp[i] <- str_extract(colnames_temp[i], "^GSM[0-9]*")
}
else{
print("unknown condition")
}
}
#colnames_temp
#conv_mat$id
#colnames_temp[!colnames_temp %in% conv_mat$id]
#matrix_in_out = data.frame(conv_mat$id,conv_mat$sample_tag)
colnames_temp <- convertvector(inputvector = colnames_temp,
matrix_in_out = data.frame(sample_info$id,                                                                    sample_info$sample_tag,stringsAsFactors = F))
colnames(m_re) <- colnames_temp
rm(colnames_temp)
m_re <- m_re[ref_sort(sort_vector =  rownames(m_re),ref_vector = deg$Row.names),]
m_re <- m_re[,ref_sort(sort_vector = colnames(m_re),ref_vector = data_new_categ$sample_info$sample_tag)]
# sum(colnames(m_re) %in% sample_info$sample_tag)
# colnames(m_re)[!colnames(m_re) %in% sample_info$sample_tag]
# table(sample_info$category)
data_new_categ[["matrix"]] <- t(m_re)
table(data_new_categ$sample_info$category)
data_new_categ[["rowslider"]] <- data_new_categ$sample_info$category
data_new_categ[["colslider"]] <- deg$gene_cluster
newcol2 <- c(A="#e31a1c",B="#1f78b4",C="#33a02c",
Epithelial="#fdbf6f",Stromal_cell="#6a3d9a",Hepatocytes="#ff7f00",Endothel="#a6cee3",
Endocrine="#cab2d6",ES_iPS_germ="#fb9a99",Blood_cell="#b2df8a")
lmat <- rbind(c(7,7,1,1,1,1),
c(7,7,5,1,1,1),
c(7,7,3,1,1,1),
c(6,4,2,9,10,1),
c(1,1,8,1,1,1))
lwid <- c(0.25, 0.1, 1, 0.01,0.5,0.01)
lhei <- c(0.1,0.2,0.1,2,0.01)
gh_new <- ggheat(df = data_new_categ$matrix,clst_method = "ward.D2",dist_method = "spearman",colslider = data_new_categ$colslider, rowslider = data_new_categ$rowslider,colname_label = F, rowname_label = F,rowslider_palette = newcol2,main = "",lmat = lmat, lwid = lwid,lhei = lhei,font.size = 14)
grid.draw(gh_new$plot_data)
# ggsave(plot = gh_new$plot_data,filename = "ggheat_stroma_emph.tiff",dpi = 300,width = 18,height = 18,units = "cm")
ggsave(plot = gh_new$plot_data,filename = "ggheat_stroma_emph_mod.tiff",dpi = 300,width = 18,height = 18,units = "cm")
# Chunk 27
# c_res <- gh_new$cluster_data
# clst_y <- c_res[[2]]
# clst_y_df <- data.frame(label=clst_y[["labels"]],
#              order=clst_y[["order"]])
# clst_y["labels"]
# clst_y["order"]
# Chunk 28
# df = t(m)
# colslider= data_new_categ$colslider
# rowslider=data_new_categ$rowslider
# ColV = T
# colname_label = F
# font.size = 1
#                    clst_method="average"
#                    dist_method="spearman"
ggheat2 <- function(df,
clst_method="average",
dist_method="spearman",
colslider, rowslider,
ColV=T, RowV=T,
colname_label=T, rowname_label=T,
colangle=45, rowangle=45,
colours=c("blue", "white", "red"),
key.axis.fontsize=12,
main="title",
add_p=NULL,
add_p2=NULL,
lmat=NULL,
lhei=NULL,lwid=NULL,
font.size=10,
rowslider_palette=NULL,
rowslider_palette_order=NULL){
require(ggplot2)
require(reshape2)##for melting
require(grid)
require(gridExtra)
require(ggdendro)
require(scales)
##common theme function
theme_ggh <- function(font.size=10,legend.position = "none") {
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
plot.title = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.spacing = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
plot.margin = unit(c(0,0,0,0),"cm"),
text = element_text(family = "Arial",size=font.size,lineheight = 0.7),
legend.position = "none"
)
}
##blank grid for plotting blank
blank_grid <- grid.rect(gp=gpar(col="white"))
df <- as.data.frame(df)
##clustering if needed
cluster_data <- list()
if(ColV==T){
dist_x <- as.dist(1-cor(as.matrix(df),method = dist_method))
clst_x <- hclust(dist_x,method = clst_method)
df <- df[,clst_x$order]
colslider <- colslider[clst_x$order]
cluster_data <- append(cluster_data, list(clst_x))
}
if(RowV==T){
dist_y <- as.dist(1-cor(as.matrix(t(df)),method = dist_method))
clst_y <- hclust(dist_y,method = clst_method)
df <- df[clst_y$order,]
rowslider <- rowslider[clst_y$order]
cluster_data <- append(cluster_data, list(clst_y))
}
df4out <- df
##matrix prepareation
colname <- colnames(df)
colname <- data.frame(text=colname, x=c(1:length(colname)),colslider=colslider)
colnames(df) <- c(1:ncol(df))
rowname <- rownames(df)
rowname <- data.frame(text=rowname, y=c(1:length(rowname)),rowslider=rowslider)
rownames(df) <- c(1:nrow(df))
##for rowname_order
rowname[,3] <- factor(x = rowslider, levels = c("A", "Hepatocytes", "B","Stromal_cell", "C", "Blood_cell", "Endothel", "ES_iPS_germ","Endocrine", "Epithelial"))
##
tiledata <- melt(as.matrix(df))
##heatmap is p1
p1 <- ggplot()+
geom_tile(data = tiledata, mapping = aes(x=Var2, y = Var1, fill=value))+
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0))+
scale_fill_gradient2(low = colours[1],mid = colours[2],high = colours[3],midpoint = (max(tiledata$value)+min(tiledata$value))/2)+
guides(fill=F)+
theme_ggh()
#p1
##colslider is cols
cols <- ggplot()+
geom_tile(data=colname,aes(x=x,y=0,fill=colslider))+
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0))+
theme_ggh()
##          scale_fill_identity(guide = "legend")+
#cols
if(!is.null(rowslider_palette)){
add_fill <- function(){return(scale_fill_manual(values = rowslider_palette,name="category"))}
}else{
add_fill <- function(){return(scale_fill_discrete(name="category"))}
}
##rowslider is rows
rows <- ggplot()+
geom_tile(data=rowname,aes(x=0,y=y,fill=rowslider))+
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0))+
add_fill()+
theme(legend.text = element_text(family = "Arial",size=font.size,lineheight = 0.7),
legend.title =element_text(family = "Arial",size=font.size+2,lineheight = 0.7))
rows_grob <- ggplot_gtable(ggplot_build(rows))
id.legend <- which(sapply(rows_grob$grobs, function(x) x$name)=="guide-box")
rows_legend <- rows_grob$grobs[[id.legend]]
rows <- ggplot()+
geom_tile(data=rowname,aes(x=0,y=y,fill=rowslider))+
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0))+
add_fill()+
theme_ggh()
#rows
##col dendrogram if needed
if(ColV==T){
coldend <- as.dendrogram(clst_x)
#plot(coldend)
coldend <- segment(dendro_data(coldend))
cold <- ggplot()+
geom_segment(data=coldend,aes(x=x, y=y, xend=xend, yend=yend))+
scale_x_continuous(expand=c(0,0),limits = c(0.5,max(coldend$xend)+0.5))+
scale_y_continuous(expand=c(0,0))+
theme_ggh()
#cold
}else{
cold <- blank_grid
}
##row dendrogram if needed
if(RowV==T){
rowdend <- as.dendrogram(clst_y)
#plot(rowdend)
rowdend <- segment(dendro_data(rowdend))
rowd <- ggplot()+
geom_segment(data = rowdend,aes(x=x, y=y, xend=xend, yend=yend))+
scale_x_continuous(expand=c(0,0),limits = c(0.5,max(rowdend$xend)+0.5))+
scale_y_reverse(expand=c(0,0))+
theme_ggh()+
coord_flip()
#rowd
}else{
rowd <- blank_grid
}
##key histgram(density plot)
key_hist <- hist(tiledata$value,breaks = 50,plot = F)
max_hist <- max(key_hist$density)
key_density <- data.frame(range=seq(min(tiledata$value)-1, max(tiledata$value)+1, 0.02))
key_density_range <- density(tiledata$value)
key <-  ggplot()+
geom_tile(data = key_density,
mapping = aes(x = range, y=max_hist/2*1.2,fill=range,width=0.02, height=max_hist*1.2),
show.legend = F)+
scale_fill_gradient2(low = colours[1],mid = colours[2],high = colours[3],
midpoint = (max(tiledata$value)+min(tiledata$value))/2,
limits=c(min(tiledata$value),max(tiledata$value)),
oob=squish)+
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0))+
geom_histogram(data = tiledata,mapping = aes(x=value,y=..density..),
alpha=0.8, binwidth = (max(tiledata$value)-min(tiledata$value))/50)+
guides(fill=F,colour=F)+xlab("")+ylab("")+
theme_classic()+
theme(text = element_text(family = "Arial",size=font.size,lineheight = 0.7),
axis.text.x =  element_text(family = "Arial",size=key.axis.fontsize),
axis.text.y =  element_text(family = "Arial",size=key.axis.fontsize),
plot.margin = unit(c(0,0,-0.02,-0.015),"native"))
#key
##colnames
if(colname_label==T){
colname_label <- ggplot()+
geom_text(data=colname,mapping = aes(x=x,y=0, label=text,angle=colangle),
size=3,hjust=0)+
scale_x_continuous(expand=c(0,0),limits = c(min(colname$x)-0.5, max(colname$x)+0.5))+
scale_y_continuous(expand=c(0,0),limits = c(0,1))+
theme_ggh(font.size =font.size)
colname_table <- ggplot_gtable(ggplot_build(colname_label))
colname_table$layout$clip[colname_table$layout$name=="panel"] <- "off"
#class(colname_table)
#colname_label
}else{
colname_label <- blank_grid
colname_table <- blank_grid
}
##rownames
if(rowname_label==T){
rowname_label <- ggplot()+
geom_text(data = rowname,mapping = aes(x=0,y=y, label=text,angle=rowangle),
size=3,hjust=0)+
scale_x_continuous(expand=c(0,0),limits = c(0,0.05))+
scale_y_continuous(expand=c(0,0),limits = c(min(rowname$y)-0.5, max(rowname$y)+0.5))+
theme_ggh(font.size =font.size)
rowname_table <- ggplot_gtable(ggplot_build(rowname_label))
rowname_table$layout$clip[rowname_table$layout$name=="panel"] <- "off"
#rowname_label
}else{
rowname_label <- blank_grid
rowname_table <- blank_grid
}
if(!is.null(add_p)){
add <- add_p
}else{
add <- blank_grid
}
#add <- b1
add <- rows_legend
if(is.null(add_p2)){
add_p2 <- blank_grid
}
##layout
if(is.null(lmat) | is.null(lwid) | is.null(lhei)){
lmat <- rbind(c(7,7,1,1,1,11),
c(7,7,5,1,1,1),
c(7,7,3,1,1,1),
c(6,4,2,9,10,1),
c(1,1,8,1,1,1))
lwid <- c(0.2, 0.1, 1, 0.1,0.5,0.01)
lhei <- c(0.1,0.2,0.1,2,0.01)
}
g1 <- grid.arrange(blank_grid,#1
p1,#2
cols,#3
rows,#4
cold,#5
rowd,#6
key,#7
colname_table,#8
rowname_table,#9
add,#10
add_p2,#11
layout_matrix=lmat,heights=lhei, widths=lwid,
top=textGrob(main, gp=gpar(fontsize=20,fontfamily="Arial")))
result_list <- list(plot_data=g1, cluster_data=cluster_data)
result_list$df <- df4out
result_list$tiledate <- tiledata
result_list$rn <- rowname
result_list$cn <- colname
return(result_list)
}
# Chunk 29
row_clst <- gh_new$cluster_data[2][[1]]
# row_clst$order[str_detect(row_clst$labels,pattern = "Stroma_cell|_B_")]
# row_clst$labels[row_clst$order]
# row_clst$order
# cutree(row_clst, k = 10)
row_clst_df <- data.frame(1:length(row_clst$order),row_clst$order, row_clst$labels,row_clst$labels[row_clst$order],cutree(row_clst, k = 10)[row_clst$order])
row_clst_df
range2 <- range(row_clst_df[row_clst_df$"cutree.row_clst..k...10..row_clst.order."=="2",]$"X1.length.row_clst.order.")
range10 <- range(row_clst_df[row_clst_df$"cutree.row_clst..k...10..row_clst.order."=="10",]$"X1.length.row_clst.order.")
arrow_t_length <- 0.5
arrow_width <- 1
add_p <- ggplot()+
annotate("segment",x=range2[1], xend = range2[2]-1,y = 0, yend = 0, arrow=arrow(ends = "both", angle = 90,length = unit(arrow_t_length, "cm")),color="blue",size=arrow_width)+
annotate("segment",x=range10[1]+1, xend = range10[2],y = 0, yend = 0, arrow=arrow(ends = "both", angle = 90,length = unit(arrow_t_length, "cm")),color="red",size=arrow_width)+
coord_flip()+
scale_x_continuous(expand=c(0,0), limits = c(1,741))+
theme_ggh()
add_p
col_mod <- function(chr,sub = -32){
is.color <- function(chr){
res <- try(col2rgb(chr), silent = TRUE)
return(!"try-error"%in%class(res))
}
if(is.color(chr)){
color_in <- col2rgb(chr)
color_in <- color_in + sub
color_in <- ifelse(color_in >= 255, 255, color_in)
color_in <- ifelse(color_in <= 0, 0, color_in)
color_out <- as.hexmode(color_in)
color_out <- as.character(color_out)
color_out <- paste("#",
color_out[1],color_out[2],color_out[3],sep = "")
return(color_out)
}else{
return("black")
}
}
newcol3 <- c(A="#e31a1c",B="#1f78b4",C="#33a02c",
Stromal_cell="#6a3d9a",Hepatocytes="#ff7f00",Endothel="#a6cee3",Epithelial="#fdbf6f",
Endocrine="#cab2d6",ES_iPS_germ="#fb9a99",Blood_cell="#b2df8a")
newcol3
lmat <- rbind(c(7,7,7,1,1,1,1),
c(7,7,7,5,1,1,1),
c(7,7,7,3,1,1,1),
c(1,6,4,2,11,10,9),
c(1,1,1,8,1,1,1))
lwid <- c(0.1,0.2, 0.08, 1, 0.08,0.45,0.01)
lhei <- c(0.1,0.2,0.1,2,0.01)
newcol3
col_mod <- function(chr,sub = -32){
is.color <- function(chr){
res <- try(col2rgb(chr), silent = TRUE)
return(!"try-error"%in%class(res))
}
if(is.color(chr)){
color_in <- col2rgb(chr)
color_in <- color_in + sub
color_in <- ifelse(color_in >= 255, 255, color_in)
color_in <- ifelse(color_in <= 0, 0, color_in)
color_out <- as.hexmode(color_in)
color_out <- as.character(color_out)
color_out <- paste("#",
color_out[1],color_out[2],color_out[3],sep = "")
return(color_out)
}else{
return("black")
}
}
newcol3 <- c(A="#e31a1c",B="#1f78b4",C="#33a02c",
Stromal_cell="#6a3d9a",Hepatocytes="#ff7f00",Endothel="#a6cee3",Epithelial="#fdbf6f",
Endocrine="#cab2d6",ES_iPS_germ="#fb9a99",Blood_cell="#b2df8a")
# newcol3 <- c(A="#e31a1c",B="#1f78b4",C="#33a02c",
#             Stromal_cell="#6a3d9a",Hepatocytes="#ff7f00",Endothel="#a6cee3",Epithelial="#a6a6a6",
#             Endocrine="#cab2d6",ES_iPS_germ="#fb9a99",Blood_cell="#b2df8a")
newcol3[1:5] <- sapply(newcol3[1:5], col_mod, -16)
newcol3[6:10] <- sapply(newcol3[6:10], col_mod, +32)
newcol3
df_temp <- data_new_categ$matrix
df_temp <- data_new_categ$matrix
newcol3
df_temp <- data_new_categ$matrix
#
# newcol3 <- c(A="#e31a1c",B="#1f78b4",C="#33a02c",
#             Stromal_cell="#6a3d9a",Hepatocytes="#ff7f00",Endothel="#a6cee3",Epithelial="#fdbf6f",
#             Endocrine="#cab2d6",ES_iPS_germ="#fb9a99",Blood_cell="#b2df8a")
newcol3 <- c(A="#e31a1c",B="#1f78b4",C="#33a02c",
Stromal_cell="#6a3d9a",Hepatocytes="#ff7f00",Endothel="#a6cee3",Epithelial="#a6a6a6",
Endocrine="#cab2d6",ES_iPS_germ="#fb9a99",Blood_cell="#b2df8a")
newcol3[1:5] <- sapply(newcol3[1:5], col_mod, -16)
newcol3[6:10] <- sapply(newcol3[6:10], col_mod, +32)
newcol3
df_temp <- data_new_categ$matrix
lmat <- rbind(c(7,7,7,1,1,1,1),
c(7,7,7,5,1,1,1),
c(7,7,7,3,1,1,1),
c(1,6,4,2,11,10,9),
c(1,1,1,8,1,1,1))
lwid <- c(0.1,0.2, 0.08, 1, 0.08,0.45,0.01)
lhei <- c(0.1,0.2,0.1,2,0.01)
newcol3
base::saveRDS(newcol3, "./setting_newcol3.rds")
data_new_categ$rowslider
gh_new2 <- ggheat2(df = data_new_categ$matrix,clst_method = "ward.D2",dist_method = "spearman",colslider = data_new_categ$colslider, rowslider = data_new_categ$rowslider,colname_label = F, rowname_label = F,rowslider_palette = newcol3,main = "",lmat = lmat, lwid = lwid,lhei = lhei,font.size = 14,add_p2 = add_p)
grid.draw(gh_new2$plot_data)
ggsave(plot = gh_new2$plot_data,filename = "R_137ggheat_stroma_emph2_mod.tiff",dpi = 300,width = 18,height = 18,units = "cm")
